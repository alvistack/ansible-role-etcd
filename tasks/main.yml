---

# (c) Wong Hoi Sing Edison <hswong3i@pantarei-design.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: include default variables
  include_vars: "../vars/main.yml"

- name: include release specific variables
  include_vars: "{{ _loop_var }}"
  loop: "{{ query('first_found', _params) }}"
  loop_control:
    loop_var: _loop_var
  vars:
    _params:
      files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
      paths:
        - "../vars"
      skip: true

- name: include release specific tasks
  include_tasks: "{{ _loop_var }}"
  loop: "{{ query('first_found', _params) }}"
  loop_control:
    loop_var: _loop_var
  vars:
    _params:
      files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
      paths:
        - "."
      skip: true

- name: prepare directories
  file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
    state: "{{ item.state | default('directory') }}"
  loop:
    - { dest: "/etc/default" }
    - { dest: "/lib/systemd/system" }
    - { dest: "/usr/local/bin" }
    - { dest: "/var/lib/etcd" }
    - { dest: "{{ etcd_cert_file | dirname }}" }
    - { dest: "{{ etcd_key_file | dirname }}" }
    - { dest: "{{ etcd_peer_cert_file | dirname }}" }
    - { dest: "{{ etcd_peer_key_file | dirname }}" }
    - { dest: "{{ etcd_peer_trusted_ca_file | dirname }}" }
    - { dest: "{{ etcd_trusted_ca_file | dirname }}" }

- name: download archive
  shell: |
    set -euxo pipefail
    mkdir -p /var/log/ansible
    exec &> >(tee -a /var/log/ansible/{{ etcd_download.checksum }}-get_url.log)
    TMP_DIR="$(mktemp -d)" \
      && cd $TMP_DIR \
      && mkdir -p .{{ etcd_download.dest | dirname }} \
      && curl -skL -m 300 {{ etcd_download.url }} > .{{ etcd_download.dest }} \
      && echo -n "{{ etcd_download.checksum }} .{{ etcd_download.dest }}" | sha256sum -c - \
      && mkdir -p {{ etcd_download.dest | dirname }} \
      && mv .{{ etcd_download.dest }} {{ etcd_download.dest }} \
      && rm -rf $TMP_DIR
  args:
    executable: "/bin/bash"
    creates: "/var/log/ansible/{{ etcd_download.checksum }}-get_url.log"
  register: result
  until: result is succeeded

- name: unarchive package
  shell: |
    set -euxo pipefail
    mkdir -p /var/log/ansible
    exec &> >(tee -a /var/log/ansible/{{ etcd_download.checksum }}-unarchive.log)
    cd /usr/local/bin
    TMP_DIR="$(mktemp -d)" \
      && tar -zx -C $TMP_DIR -f {{ etcd_download.dest }} \
      && chown root:root $TMP_DIR/*/etcd* \
      && chmod 0755 $TMP_DIR/*/etcd* \
      && mv $TMP_DIR/*/etcd* . \
      && rm -rf $TMP_DIR
  args:
    executable: "/bin/bash"
    creates: "/var/log/ansible/{{ etcd_download.checksum }}-unarchive.log"
  notify:
    - etcd | systemctl daemon-reload
    - etcd | systemctl restart etcd.service

- name: copy templates
  template:
    dest: "{{ item.dest }}"
    src: "{{ item.src | default('./templates' + item.dest + '.j2') }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
  loop:
    - { dest: "/etc/default/etcd" }
    - { dest: "/lib/systemd/system/etcd.service" }
  notify:
    - etcd | systemctl daemon-reload
    - etcd | systemctl restart etcd.service

- name: prepare files
  file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
    state: "{{ item.state | default('file') }}"
  loop:
    - { dest: "/etc/default/etcd" }
    - { dest: "/usr/local/bin/etcd", mode: "0755" }
    - { dest: "/usr/local/bin/etcdctl", mode: "0755" }
    - { dest: "/lib/systemd/system/etcd.service" }
  notify:
    - etcd | systemctl daemon-reload
    - etcd | systemctl restart etcd.service

- name: "generate {{ etcd_trusted_ca_file | splitext | first }}.key"
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  vars:
    ansible_python_interpreter: "python3"
  openssl_privatekey:
    path: "{{ etcd_trusted_ca_file | splitext | first }}.key"
  when: inventory_hostname == ansible_play_hosts[0]
  delegate_to: "{{ ansible_play_hosts[0] }}"
  notify:
    - etcd | systemctl restart etcd.service

- name: "generate {{ etcd_trusted_ca_file | splitext | first }}.csr"
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  vars:
    ansible_python_interpreter: "python3"
  openssl_csr:
    path: "{{ etcd_trusted_ca_file | splitext | first }}.csr"
    privatekey_path: "{{ etcd_trusted_ca_file | splitext | first }}.key"
    common_name: "{{ ansible_play_hosts[0] }}"
    subject:
      CN: "{{ ansible_play_hosts[0] }}"
    basic_constraints: "CA:TRUE"
  when: inventory_hostname == ansible_play_hosts[0]
  delegate_to: "{{ ansible_play_hosts[0] }}"
  notify:
    - etcd | systemctl restart etcd.service

- name: "generate {{ etcd_trusted_ca_file }}"
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  vars:
    ansible_python_interpreter: "python3"
  openssl_certificate:
    path: "{{ etcd_trusted_ca_file }}"
    csr_path: "{{ etcd_trusted_ca_file | splitext | first }}.csr"
    privatekey_path: "{{ etcd_trusted_ca_file | splitext | first }}.key"
    provider: "selfsigned"
  when: inventory_hostname == ansible_play_hosts[0]
  delegate_to: "{{ ansible_play_hosts[0] }}"
  notify:
    - etcd | systemctl restart etcd.service

- name: "generate {{ etcd_key_file }}"
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  vars:
    ansible_python_interpreter: "python3"
  openssl_privatekey:
    path: "{{ etcd_key_file }}"
  when: inventory_hostname == ansible_play_hosts[0]
  delegate_to: "{{ ansible_play_hosts[0] }}"
  notify:
    - etcd | systemctl restart etcd.service

- name: "generate {{ etcd_cert_file | splitext | first }}.csr"
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  vars:
    ansible_python_interpreter: "python3"
  openssl_csr:
    path: "{{ etcd_cert_file | splitext | first }}.csr"
    privatekey_path: "{{ etcd_key_file }}"
    common_name: "{{ etcd_csr_common_name }}"
    subject:
      CN: "{{ etcd_csr_common_name }}"
    subject_alt_name: "{{ etcd_csr_subject_alt_name }}"
    key_usage:
      - digitalSignature
      - keyEncipherment
      - nonRepudiation
    extended_key_usage:
      - clientAuth
      - serverAuth
    basic_constraints: "CA:FALSE"
  when: inventory_hostname == ansible_play_hosts[0]
  delegate_to: "{{ ansible_play_hosts[0] }}"
  notify:
    - etcd | systemctl restart etcd.service

- name: "generate {{ etcd_cert_file }}"
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  vars:
    ansible_python_interpreter: "python3"
  openssl_certificate:
    path: "{{ etcd_cert_file }}"
    csr_path: "{{ etcd_cert_file | splitext | first }}.csr"
    privatekey_path: "{{ etcd_key_file }}"
    ownca_path: "{{ etcd_trusted_ca_file }}"
    ownca_privatekey_path: "{{ etcd_trusted_ca_file | splitext | first }}.key"
    provider: "ownca"
  when: inventory_hostname == ansible_play_hosts[0]
  delegate_to: "{{ ansible_play_hosts[0] }}"
  notify:
    - etcd | systemctl restart etcd.service

- name: "generate {{ etcd_peer_trusted_ca_file | splitext | first }}.key"
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  vars:
    ansible_python_interpreter: "python3"
  openssl_privatekey:
    path: "{{ etcd_peer_trusted_ca_file | splitext | first }}.key"
  when: inventory_hostname == ansible_play_hosts[0]
  delegate_to: "{{ ansible_play_hosts[0] }}"
  notify:
    - etcd | systemctl restart etcd.service

- name: "generate {{ etcd_peer_trusted_ca_file | splitext | first }}.csr"
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  vars:
    ansible_python_interpreter: "python3"
  openssl_csr:
    path: "{{ etcd_peer_trusted_ca_file | splitext | first }}.csr"
    privatekey_path: "{{ etcd_peer_trusted_ca_file | splitext | first }}.key"
    common_name: "{{ ansible_play_hosts[0] }}"
    subject:
      CN: "{{ ansible_play_hosts[0] }}"
    basic_constraints: "CA:TRUE"
  when: inventory_hostname == ansible_play_hosts[0]
  delegate_to: "{{ ansible_play_hosts[0] }}"
  notify:
    - etcd | systemctl restart etcd.service

- name: "generate {{ etcd_peer_trusted_ca_file }}"
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  vars:
    ansible_python_interpreter: "python3"
  openssl_certificate:
    path: "{{ etcd_peer_trusted_ca_file }}"
    csr_path: "{{ etcd_peer_trusted_ca_file | splitext | first }}.csr"
    privatekey_path: "{{ etcd_peer_trusted_ca_file | splitext | first }}.key"
    provider: "selfsigned"
  when: inventory_hostname == ansible_play_hosts[0]
  delegate_to: "{{ ansible_play_hosts[0] }}"
  notify:
    - etcd | systemctl restart etcd.service

- name: "generate {{ etcd_peer_key_file }}"
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  vars:
    ansible_python_interpreter: "python3"
  openssl_privatekey:
    path: "{{ etcd_peer_key_file }}"
  when: inventory_hostname == ansible_play_hosts[0]
  delegate_to: "{{ ansible_play_hosts[0] }}"
  notify:
    - etcd | systemctl restart etcd.service

- name: "generate {{ etcd_peer_cert_file | splitext | first }}.csr"
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  vars:
    ansible_python_interpreter: "python3"
  openssl_csr:
    path: "{{ etcd_peer_cert_file | splitext | first }}.csr"
    privatekey_path: "{{ etcd_peer_key_file }}"
    common_name: "{{ etcd_peer_csr_common_name }}"
    subject:
      CN: "{{ etcd_peer_csr_common_name }}"
    subject_alt_name: "{{ etcd_peer_csr_subject_alt_name }}"
    key_usage:
      - digitalSignature
      - keyEncipherment
      - nonRepudiation
    extended_key_usage:
      - clientAuth
      - serverAuth
    basic_constraints: "CA:FALSE"
  when: inventory_hostname == ansible_play_hosts[0]
  delegate_to: "{{ ansible_play_hosts[0] }}"
  notify:
    - etcd | systemctl restart etcd.service

- name: "generate {{ etcd_peer_cert_file }}"
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  vars:
    ansible_python_interpreter: "python3"
  openssl_certificate:
    path: "{{ etcd_peer_cert_file }}"
    csr_path: "{{ etcd_peer_cert_file | splitext | first }}.csr"
    privatekey_path: "{{ etcd_peer_key_file }}"
    ownca_path: "{{ etcd_peer_trusted_ca_file }}"
    ownca_privatekey_path: "{{ etcd_peer_trusted_ca_file | splitext | first }}.key"
    provider: "ownca"
  when: inventory_hostname == ansible_play_hosts[0]
  delegate_to: "{{ ansible_play_hosts[0] }}"
  notify:
    - etcd | systemctl restart etcd.service

- name: base64 encode
  shell: |
    set -euxo pipefail
    tar zcfP - {{ _params | join(' ') }} | base64 -w 0
  vars:
    _params:
      - "{{ etcd_cert_file }}"
      - "{{ etcd_key_file }}"
      - "{{ etcd_trusted_ca_file }}"
      - "{{ etcd_peer_cert_file }}"
      - "{{ etcd_peer_key_file }}"
      - "{{ etcd_peer_trusted_ca_file }}"
  args:
    executable: "/bin/bash"
  when: inventory_hostname != ansible_play_hosts[0]
  delegate_to: "{{ ansible_play_hosts[0] }}"
  register: base64_encode_result
  changed_when: base64_encode_result is not succeeded

- name: base64 decode
  shell: |
    set -euxo pipefail
    echo -n {{ base64_encode_result.stdout | quote }} | base64 -d | tar zx -C /
  args:
    executable: "/bin/bash"
  when: inventory_hostname != ansible_play_hosts[0]
  register: base64_decode_result
  changed_when: base64_decode_result is not succeeded

- name: prepare files
  file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
    state: "{{ item.state | default('file') }}"
  loop:
    - { dest: "{{ etcd_cert_file }}" }
    - { dest: "{{ etcd_key_file }}", mode: "0600" }
    - { dest: "{{ etcd_peer_cert_file }}" }
    - { dest: "{{ etcd_peer_key_file }}", mode: "0600" }
    - { dest: "{{ etcd_peer_trusted_ca_file }}" }
    - { dest: "{{ etcd_trusted_ca_file }}" }

- name: flush handlers
  meta: flush_handlers

- name: systemctl start etcd.service
  service:
    name: "etcd.service"
    state: "started"
    enabled: true
  changed_when: false
  failed_when: false
